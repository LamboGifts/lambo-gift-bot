import json
import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7678954168:AAG6755ngOoYcQfIt6viZKMRXRcv6dOd0vY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://lambo-gift.onrender.com")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = load_data()
    user_id = str(user_id)
    
    if user_id not in data:
        data[user_id] = {
            "balance": 100,
            "gifts_sent": 0,
            "gifts_received": 0,
            "total_spent": 0
        }
        save_data(data)
    
    return data[user_id]

def update_user_data(user_id, updates):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = load_data()
    user_id = str(user_id)
    
    if user_id not in data:
        get_user_data(user_id)
        data = load_data()
    
    data[user_id].update(updates)
    save_data(data)

# –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤
GIFTS_CATALOG = {
    "rose": {"name": "üåπ –†–æ–∑–∞", "price": 10, "emoji": "üåπ"},
    "cake": {"name": "üéÇ –¢–æ—Ä—Ç", "price": 25, "emoji": "üéÇ"},
    "diamond": {"name": "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", "price": 50, "emoji": "üíé"},
    "crown": {"name": "üëë –ö–æ—Ä–æ–Ω–∞", "price": 100, "emoji": "üëë"},
    "rocket": {"name": "üöÄ –†–∞–∫–µ—Ç–∞", "price": 75, "emoji": "üöÄ"},
    "star": {"name": "‚≠ê –ó–≤–µ–∑–¥–∞", "price": 30, "emoji": "‚≠ê"}
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_data = get_user_data(user.id)
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        f"üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftBot, {user.first_name}!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\n"
        f"üéâ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–∑—å—è–º!"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    keyboard = []
    for gift_id, gift_info in GIFTS_CATALOG.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{gift_info['emoji']} {gift_info['name']} - {gift_info['price']} –º–æ–Ω–µ—Ç",
                callback_data=f"select_gift:{gift_id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=reply_markup
    )

async def select_gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    gift_id = query.data.split(":")[1]
    gift_info = GIFTS_CATALOG.get(gift_id)
    
    if not gift_info:
        await query.edit_message_text("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    keyboard = [
        [InlineKeyboardButton("üí∏ –ö—É–ø–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"buy_gift:{gift_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üéÅ {gift_info['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {gift_info['price']} –º–æ–Ω–µ—Ç\n\n"
        f"–ì–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫?",
        reply_markup=reply_markup
    )

async def buy_gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    gift_id = query.data.split(":")[1]
    gift_info = GIFTS_CATALOG.get(gift_id)
    
    if not gift_info:
        await query.edit_message_text("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user_data = get_user_data(user_id)
    
    if user_data['balance'] < gift_info['price']:
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\n"
            f"üí∏ –ù—É–∂–Ω–æ: {gift_info['price']} –º–æ–Ω–µ—Ç",
            reply_markup=reply_markup
        )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    new_balance = user_data['balance'] - gift_info['price']
    update_user_data(user_id, {
        'balance': new_balance,
        'gifts_sent': user_data['gifts_sent'] + 1,
        'total_spent': user_data['total_spent'] + gift_info['price']
    })
    
    keyboard = [
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω!\n\n"
        f"üéÅ {gift_info['name']}\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {gift_info['price']} –º–æ–Ω–µ—Ç\n"
        f"üí≥ –û—Å—Ç–∞—Ç–æ–∫: {new_balance} –º–æ–Ω–µ—Ç\n\n"
        f"üéâ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=reply_markup
    )

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å"""
    query = update.callback_query
    await query.answer()
    
    user_data = get_user_data(query.from_user.id)
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_balance")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\n"
        f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {user_data['total_spent']} –º–æ–Ω–µ—Ç",
        reply_markup=reply_markup
    )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    user_data = get_user_data(query.from_user.id)
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\n"
        f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data['gifts_sent']}\n"
        f"üéâ –ü–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user_data['gifts_received']}\n"
        f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {user_data['total_spent']} –º–æ–Ω–µ—Ç",
        reply_markup=reply_markup
    )

async def add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    bonus = 50
    new_balance = user_data['balance'] + bonus
    update_user_data(user_id, {'balance': new_balance})
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üéâ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!\n"
        f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {bonus} –º–æ–Ω–µ—Ç\n"
        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n\n"
        f"–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–ø–ª–∞—Ç–∞ üí≥",
        reply_markup=reply_markup
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_text = (
        "üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üéÅ –ö–∞—Ç–∞–ª–æ–≥ - –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫\n"
        "üí≥ –ë–∞–ª–∞–Ω—Å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "üîÑ –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
        "2. –ö—É–ø–∏—Ç–µ –µ–≥–æ –∑–∞ –º–æ–Ω–µ—Ç—ã\n"
        "3. –ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
        "üí° –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    
    await query.edit_message_text(help_text, reply_markup=reply_markup)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_data = get_user_data(user.id)
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        f"üéÅ GiftBot - {user.first_name}!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\n"
        f"üéâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
telegram_app = Application.builder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CallbackQueryHandler(show_catalog, pattern="^catalog$"))
telegram_app.add_handler(CallbackQueryHandler(select_gift, pattern="^select_gift:"))
telegram_app.add_handler(CallbackQueryHandler(buy_gift, pattern="^buy_gift:"))
telegram_app.add_handler(CallbackQueryHandler(show_balance, pattern="^balance$"))
telegram_app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
telegram_app.add_handler(CallbackQueryHandler(add_balance, pattern="^add_balance$"))
telegram_app.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))
telegram_app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))

@app.route("/")
def index():
    return "üéÅ GiftBot is running! ‚úÖ"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    try:
        update_data = request.get_json(force=True)
        update = Update.de_json(update_data, telegram_app.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(telegram_app.process_update(update))
        loop.close()
        
        return "OK"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "ERROR", 500

def setup_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
    try:
        webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(telegram_app.bot.set_webhook(url=webhook_url))
        loop.close()
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
