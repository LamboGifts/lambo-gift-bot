import os
import requests
import json
import random
from flask import Flask, request, jsonify
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_URL = "https://lambo-gift-bot.onrender.com"

if not TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")

API_URL = f"https://api.telegram.org/bot{TOKEN}"

app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
users = {}

# –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤
GIFTS = {
    "rose": {"name": "üåπ –†–æ–∑–∞", "price": 5, "emoji": "üåπ"},
    "coffee": {"name": "‚òï –ö–æ—Ñ–µ", "price": 8, "emoji": "‚òï"},
    "cake": {"name": "üéÇ –¢–æ—Ä—Ç", "price": 15, "emoji": "üéÇ"},
    "flower": {"name": "üå∏ –ë—É–∫–µ—Ç", "price": 25, "emoji": "üå∏"},
    "gift": {"name": "üéÅ –ü–æ–¥–∞—Ä–æ–∫", "price": 40, "emoji": "üéÅ"},
    "diamond": {"name": "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", "price": 75, "emoji": "üíé"},
    "crown": {"name": "üëë –ö–æ—Ä–æ–Ω–∞", "price": 100, "emoji": "üëë"},
    "rocket": {"name": "üöÄ –†–∞–∫–µ—Ç–∞", "price": 75, "emoji": "üöÄ"},
    "star": {"name": "‚≠ê –ó–≤–µ–∑–¥–∞", "price": 30, "emoji": "‚≠ê"}
}

# –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –ü–ª–∏–Ω–∫–æ (15 —Å–ª–æ—Ç–æ–≤)
PLINKO_MULTIPLIERS = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.5, 2.0, 3.0, 2.0, 1.5, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2]

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(user_id)
    if user_id not in users:
        users[user_id] = {
            "balance": 100,
            "gifts_sent": 0,
            "gifts_received": 0,
            "total_spent": 0,
            "plinko_played": 0,
            "plinko_won": 0,
            "last_bonus": None
        }
        logger.info(f"New user created: {user_id}")
    return users[user_id]

def update_user_balance(user_id, amount):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = get_user_data(user_id)
    user_data["balance"] = max(0, user_data["balance"] + amount)

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        url = f"{API_URL}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Failed to send message: {e}")
        return None

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        url = f"{API_URL}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Failed to edit message: {e}")
        return None

def answer_callback(callback_query_id, text=""):
    """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        url = f"{API_URL}/answerCallbackQuery"
        data = {
            "callback_query_id": callback_query_id,
            "text": text
        }
        requests.post(url, data=data, timeout=5)
    except Exception as e:
        logger.error(f"Failed to answer callback: {e}")

def main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return {
        "inline_keyboard": [
            [{"text": "üéÆ –û—Ç–∫—Ä—ã—Ç—å WebApp", "web_app": {"url": f"{WEBHOOK_URL}/webapp"}}],
            [{"text": "üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤", "callback_data": "catalog"}],
            [{"text": "üé≤ –ü–ª–∏–Ω–∫–æ", "callback_data": "plinko"}],
            [{"text": "üí≥ –ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}],
            [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}]
        ]
    }

def handle_start(chat_id, user_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start"""
    user_data = get_user_data(chat_id)
    
    text = f"""üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftBot, {user_name}!</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéâ <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∏–≥—Ä–∞–π—Ç–µ –≤ –ü–ª–∏–Ω–∫–æ!</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    send_message(chat_id, text, main_menu_keyboard())

def handle_catalog(chat_id, message_id):
    """–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    keyboard = {"inline_keyboard": []}
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    gifts_items = list(GIFTS.items())
    for i in range(0, len(gifts_items), 2):
        row = []
        for j in range(i, min(i + 2, len(gifts_items))):
            gift_id, gift_info = gifts_items[j]
            row.append({
                "text": f"{gift_info['emoji']} {gift_info['name']} - {gift_info['price']}üí∞",
                "callback_data": f"buy_{gift_id}"
            })
        keyboard["inline_keyboard"].append(row)
    
    keyboard["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}])
    
    text = "üéÅ <b>–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    edit_message(chat_id, message_id, text, keyboard)

def play_plinko_game(bet_amount):
    """–õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã –ü–ª–∏–Ω–∫–æ"""
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–∞–¥–µ–Ω–∏–µ —à–∞—Ä–∏–∫–∞ —á–µ—Ä–µ–∑ –ø–µ–≥–∏
    position = 8  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ
    
    # 7 —Ä—è–¥–æ–≤ –ø–µ–≥–æ–≤
    for _ in range(7):
        direction = random.choice([-1, 1])
        position += direction
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        position = max(0, min(16, position))
    
    # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    multiplier = PLINKO_MULTIPLIERS[position]
    win_amount = int(bet_amount * multiplier)
    
    return {
        "position": position,
        "multiplier": multiplier,
        "win_amount": win_amount
    }

def handle_plinko(chat_id, message_id):
    """–ú–µ–Ω—é –ü–ª–∏–Ω–∫–æ"""
    user_data = get_user_data(chat_id)
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üé≤ –ò–≥—Ä–∞—Ç—å (5 –º–æ–Ω–µ—Ç)", "callback_data": "play_plinko_5"}],
            [{"text": "üé≤ –ò–≥—Ä–∞—Ç—å (10 –º–æ–Ω–µ—Ç)", "callback_data": "play_plinko_10"}],
            [{"text": "üé≤ –ò–≥—Ä–∞—Ç—å (25 –º–æ–Ω–µ—Ç)", "callback_data": "play_plinko_25"}],
            [{"text": "üé≤ –ò–≥—Ä–∞—Ç—å (50 –º–æ–Ω–µ—Ç)", "callback_data": "play_plinko_50"}],
            [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ª–∏–Ω–∫–æ", "callback_data": "plinko_stats"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}]
        ]
    }
    
    text = f"""üé≤ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–ª–∏–Ω–∫–æ!</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>
‚Ä¢ 5 –º–æ–Ω–µ—Ç - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
‚Ä¢ 10 –º–æ–Ω–µ—Ç - –±–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞
‚Ä¢ 25 –º–æ–Ω–µ—Ç - —Å—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞
‚Ä¢ 50 –º–æ–Ω–µ—Ç - –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞

üèÜ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª–∏:</b>
üíé x3.0 | üü¢ x2.0 | üîµ x1.5 | üü° x1.2 | ‚ö™ x1.0 | üî¥ x0.2

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data['plinko_played']}
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {user_data['plinko_won']} –º–æ–Ω–µ—Ç"""

    edit_message(chat_id, message_id, text, keyboard)

def handle_play_plinko(chat_id, message_id, bet):
    """–ò–≥—Ä–∞—Ç—å –≤ –ü–ª–∏–Ω–∫–æ"""
    user_data = get_user_data(chat_id)
    
    if user_data['balance'] < bet:
        keyboard = {
            "inline_keyboard": [
                [{"text": "üí∞ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "callback_data": "daily_bonus"}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "plinko"}]
            ]
        }
        text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–ù—É–∂–Ω–æ: {bet} –º–æ–Ω–µ—Ç\n–ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç"
        edit_message(chat_id, message_id, text, keyboard)
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    user_data['balance'] -= bet
    user_data['plinko_played'] += 1
    
    # –ò–≥—Ä–∞–µ–º
    result = play_plinko_game(bet)
    win_amount = result["win_amount"]
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    if win_amount > 0:
        user_data['balance'] += win_amount
        user_data['plinko_won'] += win_amount
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è —à–∞—Ä–∏–∫–∞
    animation = """üé≤ –®–∞—Ä–∏–∫ –ø–∞–¥–∞–µ—Ç...

    ‚ö™
   / \\
  /   \\
 /     \\
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""
    
    keyboard = {
        "inline_keyboard": [
            [{"text": f"üé≤ –ò–≥—Ä–∞—Ç—å –µ—â–µ ({bet} –º–æ–Ω–µ—Ç)", "callback_data": f"play_plinko_{bet}"}],
            [{"text": "üîô –ö –ü–ª–∏–Ω–∫–æ", "callback_data": "plinko"}]
        ]
    }
    
    profit = win_amount - bet
    
    if profit > 0:
        result_text = "üéâ –í–´–ò–ì–†–´–®!"
        result_emoji = "üü¢"
    elif profit == 0:
        result_text = "üòä –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏"
        result_emoji = "üü°"
    else:
        result_text = "üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ"
        result_emoji = "üî¥"
    
    text = f"""{animation}

{result_text}

üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet} –º–æ–Ω–µ—Ç
üéØ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {result['position'] + 1}/17
üèÜ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> x{result['multiplier']}
üíé <b>–í—ã–∏–≥—Ä—ã—à:</b> {win_amount} –º–æ–Ω–µ—Ç
üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

{result_emoji} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {'+' if profit > 0 else ''}{profit} –º–æ–Ω–µ—Ç"""

    edit_message(chat_id, message_id, text, keyboard)

def handle_daily_bonus(chat_id, message_id):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    user_data = get_user_data(chat_id)
    today = datetime.now().strftime('%Y-%m-%d')
    
    if user_data['last_bonus'] == today:
        keyboard = {"inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}]]}
        text = f"‚è∞ –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è!\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç"
        edit_message(chat_id, message_id, text, keyboard)
        return
    
    bonus = random.randint(50, 100)
    user_data['balance'] += bonus
    user_data['last_bonus'] = today
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üé≤ –ò–≥—Ä–∞—Ç—å –≤ –ü–ª–∏–Ω–∫–æ", "callback_data": "plinko"}],
            [{"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}]
        ]
    }
    
    text = f"""üéâ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!</b>

üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ:</b> {bonus} –º–æ–Ω–µ—Ç
üí≥ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!"""
    
    edit_message(chat_id, message_id, text, keyboard)

def handle_buy_gift(chat_id, message_id, gift_id):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    user_data = get_user_data(chat_id)
    gift = GIFTS.get(gift_id)
    
    if not gift:
        edit_message(chat_id, message_id, "‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if user_data['balance'] < gift['price']:
        keyboard = {
            "inline_keyboard": [
                [{"text": "üí∞ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "callback_data": "daily_bonus"}],
                [{"text": "üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", "callback_data": "catalog"}]
            ]
        }
        text = f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üí∏ <b>–ù—É–∂–Ω–æ:</b> {gift['price']} –º–æ–Ω–µ—Ç"""
        edit_message(chat_id, message_id, text, keyboard)
        return
    
    # –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
    user_data['balance'] -= gift['price']
    user_data['gifts_sent'] += 1
    user_data['total_spent'] += gift['price']
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üéÅ –ö—É–ø–∏—Ç—å –µ—â–µ", "callback_data": "catalog"}],
            [{"text": "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}]
        ]
    }
    
    text = f"""‚úÖ <b>–ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω!</b>

üéÅ <b>{gift['name']}</b>
üí∞ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {gift['price']} –º–æ–Ω–µ—Ç
üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

üéâ <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>"""

    edit_message(chat_id, message_id, text, keyboard)

@app.route("/")
def home():
    return """
    <h1>üéÅ GiftBot —Å –ü–ª–∏–Ω–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ</h1>
    <p><a href="/webapp">–û—Ç–∫—Ä—ã—Ç—å WebApp</a></p>
    """

@app.route("/webapp")
def webapp():
    """WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    return """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GiftBot WebApp</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 400px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }
        
        .balance {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .plinko-board {
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            padding: 30px 20px;
            text-align: center;
        }
        
        .multipliers {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 8px;
            margin: 20px 0;
        }
        
        .multiplier {
            padding: 10px;
            border-radius: 8px;
            font-weight: bold;
            font-size: 12px;
            text-align: center;
        }
        
        .multiplier.high { background: #4caf50; }
        .multiplier.medium { background: #ff9800; }
        .multiplier.low { background: #f44336; }
        
        .bet-controls {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            border: none;
            color: #fff;
            padding: 15px;
            border-radius: 15px;
            cursor: pointer;
            font-weight: bold;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        .btn:disabled {
            background: rgba(255,255,255,0.3);
            cursor: not-allowed;
            transform: none;
        }
        
        .result {
            margin-top: 20px;
            padding: 20px;
            background: rgba(255,255,255,0.15);
            border-radius: 15px;
            text-align: center;
            display: none;
        }
        
        .result.show {
            display: block;
            animation: slideUp 0.5s ease;
        }
        
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="balance">üí∞ <span id="balance">100</span> –º–æ–Ω–µ—Ç</div>
            <div>GiftBot WebApp</div>
        </div>
        
        <div class="plinko-board">
            <h3>üé≤ –ü–ª–∏–Ω–∫–æ</h3>
            
            <div class="multipliers">
                <div class="multiplier low">0.2x</div>
                <div class="multiplier medium">0.8x</div>
                <div class="multiplier medium">1.2x</div>
                <div class="multiplier high">2.0x</div>
                <div class="multiplier high">3.0x</div>
                <div class="multiplier high">2.0x</div>
                <div class="multiplier medium">1.2x</div>
                <div class="multiplier medium">0.8x</div>
                <div class="multiplier low">0.2x</div>
            </div>
            
            <div class="bet-controls">
                <button class="btn" onclick="playPlinko(5)">üé≤ 5 –º–æ–Ω–µ—Ç</button>
                <button class="btn" onclick="playPlinko(10)">üé≤ 10 –º–æ–Ω–µ—Ç</button>
                <button class="btn" onclick="playPlinko(25)">üé≤ 25 –º–æ–Ω–µ—Ç</button>
                <button class="btn" onclick="playPlinko(50)">üé≤ 50 –º–æ–Ω–µ—Ç</button>
            </div>
            
            <div class="result" id="plinkoResult"></div>
        </div>
    </div>
    
    <script>
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        
        let userData = { balance: 100 };
        
        function updateDisplay() {
            document.getElementById('balance').textContent = userData.balance;
        }
        
        function playPlinko(bet) {
            if (userData.balance < bet) {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
                return;
            }
            
            const buttons = document.querySelectorAll('.btn');
            buttons.forEach(btn => btn.disabled = true);
            
            userData.balance -= bet;
            
            // –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä—ã
            const multipliers = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.5, 2.0, 3.0, 2.0, 1.5, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2];
            const position = Math.floor(Math.random() * multipliers.length);
            const multiplier = multipliers[position];
            const winAmount = Math.floor(bet * multiplier);
            
            userData.balance += winAmount;
            updateDisplay();
            
            const resultDiv = document.getElementById('plinkoResult');
            const profit = winAmount - bet;
            
            resultDiv.innerHTML = `
                <div style="font-size: 18px; margin-bottom: 10px;">
                    ${winAmount > bet ? 'üéâ –í–´–ò–ì–†–´–®!' : winAmount === bet ? 'üòä –í–æ–∑–≤—Ä–∞—Ç' : 'üòî –ü—Ä–æ–∏–≥—Ä—ã—à'}
                </div>
                <div>–°—Ç–∞–≤–∫–∞: ${bet} –º–æ–Ω–µ—Ç</div>
                <div>–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${multiplier}</div>
                <div>–í—ã–∏–≥—Ä—ã—à: ${winAmount} –º–æ–Ω–µ—Ç</div>
                <div style="color: ${profit > 0 ? '#4caf50' : profit < 0 ? '#f44336' : '#ff9800'}">
                    –†–µ–∑—É–ª—å—Ç–∞—Ç: ${profit > 0 ? '+' : ''}${profit} –º–æ–Ω–µ—Ç
                </div>
            `;
            
            resultDiv.classList.add('show');
            
            setTimeout(() => {
                buttons.forEach(btn => btn.disabled = false);
                resultDiv.classList.remove('show');
            }, 3000);
        }
        
        updateDisplay();
    </script>
</body>
</html>"""

@app.route(f"/webhook", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook - –ø—É—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        data = request.get_json()
        
        if "message" in data:
            message = data["message"]
            chat_id = message["chat"]["id"]
            user_name = message["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            text = message.get("text", "")
            
            if text == "/start":
                handle_start(chat_id, user_name)
        
        elif "callback_query" in data:
            callback = data["callback_query"]
            chat_id = callback["message"]["chat"]["id"]
            message_id = callback["message"]["message_id"]
            callback_data = callback["data"]
            user_name = callback["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            answer_callback(callback["id"])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data
            if callback_data == "catalog":
                handle_catalog(chat_id, message_id)
            elif callback_data == "plinko":
                handle_plinko(chat_id, message_id)
            elif callback_data.startswith("play_plinko_"):
                bet = int(callback_data.split("_")[-1])
                handle_play_plinko(chat_id, message_id, bet)
            elif callback_data in ["balance", "stats"]:
                user_data = get_user_data(chat_id)
                text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - {user_name}</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data['gifts_sent']}
üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏: {user_data['total_spent']} –º–æ–Ω–µ—Ç

üé≤ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–ª–∏–Ω–∫–æ:</b>
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data['plinko_played']}
üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {user_data['plinko_won']} –º–æ–Ω–µ—Ç"""
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "callback_data": "daily_bonus"}],
                        [{"text": "üé≤ –ò–≥—Ä–∞—Ç—å –≤ –ü–ª–∏–Ω–∫–æ", "callback_data": "plinko"}],
                        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}]
                    ]
                }
                edit_message(chat_id, message_id, text, keyboard)
            elif callback_data == "daily_bonus":
                handle_daily_bonus(chat_id, message_id)
            elif callback_data == "main":
                user_data = get_user_data(chat_id)
                text = f"""üéÅ <b>GiftBot - {user_name}</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéâ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"""
                edit_message(chat_id, message_id, text, main_menu_keyboard())
            elif callback_data.startswith("buy_"):
                gift_id = callback_data.replace("buy_", "")
                handle_buy_gift(chat_id, message_id, gift_id)
        
        return "OK"
    
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "ERROR", 500

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        response = requests.post(f"{API_URL}/setWebhook", data={"url": webhook_url}, timeout=10)
        result = response.json()
        
        if result.get("ok"):
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ webhook: {result}")
            return False
            
    except Exception as e:
        logger.error(f"Failed to setup webhook: {e}")
        return False

if __name__ == "__main__":
    setup_webhook()
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port)
