import json
import os
import logging
import asyncio
import random
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ –∞–¥—Ä–µ—Å –≤–µ–±—Ö—É–∫–∞ (–∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã)
TOKEN = "7678954168:AAG6755ngOoYcQfIt6viZKMRXRcv6dOd0vY"
WEBHOOK_URL = "https://lambo-gift-bot.onrender.com"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# =============== –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===============

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_user_data(user_id):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        data[user_id] = {
            "balance": 100,
            "gifts_sent": 0,
            "gifts_received": 0,
            "total_spent": 0
        }
        save_data(data)
    return data[user_id]

def update_user_data(user_id, updates):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        get_user_data(user_id)
        data = load_data()
    data[user_id].update(updates)
    save_data(data)

# =============== –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ ===============

GIFTS_CATALOG = {
    "rose": {"name": "üåπ –†–æ–∑–∞", "price": 10, "emoji": "üåπ"},
    "cake": {"name": "üéÇ –¢–æ—Ä—Ç", "price": 25, "emoji": "üéÇ"},
    "diamond": {"name": "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", "price": 50, "emoji": "üíé"},
    "crown": {"name": "üëë –ö–æ—Ä–æ–Ω–∞", "price": 100, "emoji": "üëë"},
    "rocket": {"name": "üöÄ –†–∞–∫–µ—Ç–∞", "price": 75, "emoji": "üöÄ"},
    "star": {"name": "‚≠ê –ó–≤–µ–∑–¥–∞", "price": 30, "emoji": "‚≠ê"}
}

# =============== Plinko ===============

PLINKO_MULTIPLIERS = [0, 0.5, 1, 2, 5, 10]

async def plinko_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("10", callback_data="plinko_bet:10"),
         InlineKeyboardButton("25", callback_data="plinko_bet:25")],
        [InlineKeyboardButton("50", callback_data="plinko_bet:50"),
         InlineKeyboardButton("100", callback_data="plinko_bet:100")],
        [InlineKeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="plinko_custom")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã –≤ Plinko (–º–∏–Ω. 10):", reply_markup=reply_markup)

async def plinko_custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_custom_bet"] = True
    await query.edit_message_text("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º 10):")

async def handle_custom_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_custom_bet"):
        return

    try:
        bet = int(update.message.text)
        if bet < 10:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç!")
            return
        await play_plinko(update, context, bet)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    finally:
        context.user_data["awaiting_custom_bet"] = False

async def plinko_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    bet = int(query.data.split(":")[1])
    await play_plinko(update, context, bet, query)

async def play_plinko(update: Update, context: ContextTypes.DEFAULT_TYPE, bet: int, query=None):
    user_id = (query.from_user.id if query else update.message.from_user.id)
    user_data = get_user_data(user_id)

    if user_data['balance'] < bet:
        if query:
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_balance")]])
            )
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç")
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    new_balance = user_data['balance'] - bet

    # —Å–ª—É—á–∞–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    multiplier = random.choice(PLINKO_MULTIPLIERS)
    win = int(bet * multiplier)
    new_balance += win

    update_user_data(user_id, {"balance": new_balance})

    result_text = (
        f"üéÆ Plinko!\n\n"
        f"üí∏ –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
        f"üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier}\n"
        f"üèÜ –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç"
    )

    keyboard = [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="plinko")],
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_main")]]

    if query:
        await query.edit_message_text(result_text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(result_text, reply_markup=InlineKeyboardMarkup(keyboard))

# =============== GiftBot —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===============

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user_data(user.id)

    keyboard = [
        [InlineKeyboardButton("üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üéÆ Plinko", callback_data="plinko")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        f"üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\n"
        f"üéâ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∏–≥—Ä–∞–π—Ç–µ –≤ Plinko!"
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = []
    for gift_id, gift_info in GIFTS_CATALOG.items():
        keyboard.append([
            InlineKeyboardButton(
                f"{gift_info['emoji']} {gift_info['name']} - {gift_info['price']} –º–æ–Ω–µ—Ç",
                callback_data=f"select_gift:{gift_id}"
            )
        ])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    await query.edit_message_text("üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    gift_id = query.data.split(":")[1]
    gift_info = GIFTS_CATALOG.get(gift_id)
    if not gift_info:
        await query.edit_message_text("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    keyboard = [
        [InlineKeyboardButton("üí∏ –ö—É–ø–∏—Ç—å", callback_data=f"buy_gift:{gift_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="catalog")]
    ]
    await query.edit_message_text(
        f"üéÅ {gift_info['name']}\nüí∞ –¶–µ–Ω–∞: {gift_info['price']} –º–æ–Ω–µ—Ç",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def buy_gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    gift_id = query.data.split(":")[1]
    gift_info = GIFTS_CATALOG.get(gift_id)
    if not gift_info:
        await query.edit_message_text("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    user_data = get_user_data(user_id)
    if user_data['balance'] < gift_info['price']:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_balance")]]))
        return
    new_balance = user_data['balance'] - gift_info['price']
    update_user_data(user_id, {
        'balance': new_balance,
        'gifts_sent': user_data['gifts_sent'] + 1,
        'total_spent': user_data['total_spent'] + gift_info['price']
    })
    await query.edit_message_text(
        f"‚úÖ –ö—É–ø–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {gift_info['name']}\nüí≥ –û—Å—Ç–∞—Ç–æ–∫: {new_balance} –º–æ–Ω–µ—Ç",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_main")]])
    )

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = get_user_data(query.from_user.id)
    await query.edit_message_text(
        f"üí≥ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç\nüí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user_data['total_spent']} –º–æ–Ω–µ—Ç",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_balance")],[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = get_user_data(query.from_user.id)
    await query.edit_message_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüí≥ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data['gifts_sent']}\nüéâ –ü–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user_data['gifts_received']}\nüí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user_data['total_spent']}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
    )

async def add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    bonus = 50
    new_balance = user_data['balance'] + bonus
    update_user_data(user_id, {'balance': new_balance})
    await query.edit_message_text(f"üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! +{bonus} –º–æ–Ω–µ—Ç. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]))

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üÜò –ü–æ–º–æ—â—å: /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, üéÅ ‚Äî –ø–æ–¥–∞—Ä–∫–∏, üéÆ ‚Äî Plinko", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]))

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_data = get_user_data(user.id)
    keyboard = [
        [InlineKeyboardButton("üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üéÆ Plinko", callback_data="plinko")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    await query.edit_message_text(f"üéÅ GiftBot ‚Äî {user.first_name}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç", reply_markup=InlineKeyboardMarkup(keyboard))

# =============== Flask + Webhook ===============

telegram_app = Application.builder().token(TOKEN).build()

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CallbackQueryHandler(show_catalog, pattern="^catalog$"))
telegram_app.add_handler(CallbackQueryHandler(select_gift, pattern="^select_gift:"))
telegram_app.add_handler(CallbackQueryHandler(buy_gift, pattern="^buy_gift:"))
telegram_app.add_handler(CallbackQueryHandler(show_balance, pattern="^balance$"))
telegram_app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
telegram_app.add_handler(CallbackQueryHandler(add_balance, pattern="^add_balance$"))
telegram_app.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))
telegram_app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))

telegram_app.add_handler(CallbackQueryHandler(plinko_menu, pattern="^plinko$"))
telegram_app.add_handler(CallbackQueryHandler(plinko_bet, pattern="^plinko_bet:"))
telegram_app.add_handler(CallbackQueryHandler(plinko_custom, pattern="^plinko_custom$"))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_bet))

@app.route("/")
def index():
    return "üéÅ GiftBot with Plinko is running! ‚úÖ"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    try:
        update_data = request.get_json(force=True)
        update = Update.de_json(update_data, telegram_app.bot)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(telegram_app.process_update(update))
        loop.close()
        return "OK"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "ERROR", 500

def setup_webhook():
    try:
        webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(telegram_app.bot.set_webhook(url=webhook_url))
        loop.close()
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

if __name__ == "__main__":
    setup_webhook()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
