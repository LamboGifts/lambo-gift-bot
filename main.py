import os
import requests
import json
import random
import asyncio
import time
import threading
from flask import Flask, request, jsonify
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_URL = "https://lambo-gift-bot.onrender.com"

if not TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")

API_URL = f"https://api.telegram.org/bot{TOKEN}"

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
users = {}
current_crash_game = None
game_lock = threading.Lock()

# –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–∞–∫ –≤ GiftUp
GIFTS = {
    "delicious_cake": {"name": "üéÇ –í–∫—É—Å–Ω—ã–π —Ç–æ—Ä—Ç", "price": 1, "emoji": "üéÇ", "rarity": "common"},
    "green_star": {"name": "üíö –ó–µ–ª–µ–Ω–∞—è –∑–≤–µ–∑–¥–∞", "price": 2, "emoji": "üíö", "rarity": "common"},
    "fireworks": {"name": "üéÜ –§–µ–π–µ—Ä–≤–µ—Ä–∫", "price": 5, "emoji": "üéÜ", "rarity": "uncommon"},
    "blue_star": {"name": "üíô –°–∏–Ω—è—è –∑–≤–µ–∑–¥–∞", "price": 10, "emoji": "üíô", "rarity": "uncommon"},
    "red_heart": {"name": "‚ù§Ô∏è –ö—Ä–∞—Å–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ", "price": 25, "emoji": "‚ù§Ô∏è", "rarity": "rare"},
    "golden_premium": {"name": "üëë –ó–æ–ª–æ—Ç–æ –ü—Ä–µ–º–∏—É–º", "price": 100, "emoji": "üëë", "rarity": "epic"},
    "platinum_premium": {"name": "üíé –ü–ª–∞—Ç–∏–Ω–∞ –ü—Ä–µ–º–∏—É–º", "price": 250, "emoji": "üíé", "rarity": "legendary"},
    "limited_gift": {"name": "üîÆ –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", "price": 500, "emoji": "üîÆ", "rarity": "mythic"}
}

class CrashGame:
    def __init__(self):
        self.multiplier = 1.0
        self.is_running = False
        self.is_crashed = False
        self.bets = {}  # {user_id: {'amount': bet, 'auto_cashout': multiplier}}
        self.cashed_out = {}  # {user_id: multiplier}
        self.start_time = None
        self.crash_point = None
        
    def start_round(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥"""
        self.multiplier = 1.0
        self.is_running = True
        self.is_crashed = False
        self.bets = {}
        self.cashed_out = {}
        self.start_time = time.time()
        self.crash_point = self.generate_crash_point()
        logger.info(f"New crash game started. Crash point: {self.crash_point:.2f}")
        
    def generate_crash_point(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–∫–∏ –∫—Ä–∞—Ö–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –∫–∞–∫ –≤ –Ω–∞—Å—Ç–æ—è—â–∏—Ö crash –∏–≥—Ä–∞—Ö)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–≥—Ä –∫—Ä–∞—à–∞—Ç—Å—è —Ä–∞–Ω–æ, –Ω–æ –∏–Ω–æ–≥–¥–∞ –∏–¥—É—Ç –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ
        rand = random.random()
        if rand < 0.05:  # 5% - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            return random.uniform(10.0, 100.0)
        elif rand < 0.15:  # 10% - –≤—ã—Å–æ–∫–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            return random.uniform(5.0, 10.0)
        elif rand < 0.35:  # 20% - —Å—Ä–µ–¥–Ω–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            return random.uniform(2.0, 5.0)
        else:  # 65% - –Ω–∏–∑–∫–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            return random.uniform(1.01, 2.0)
    
    def update_multiplier(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å"""
        if not self.is_running or self.is_crashed:
            return
            
        elapsed = time.time() - self.start_time
        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
        self.multiplier = 1.0 + elapsed * 0.1 * (1 + elapsed * 0.05)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∫—Ä–∞—à–∏—Ç—å—Å—è
        if self.multiplier >= self.crash_point:
            self.crash()
    
    def crash(self):
        """–ö—Ä–∞—à –∏–≥—Ä—ã"""
        self.is_crashed = True
        self.is_running = False
        logger.info(f"Game crashed at {self.multiplier:.2f}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for user_id in self.bets:
            if user_id not in self.cashed_out:
                # –ò–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª –≤—ã–≤–µ—Å—Ç–∏ - –ø—Ä–æ–∏–≥—Ä—ã—à
                user_data = get_user_data(user_id)
                user_data['total_lost'] += self.bets[user_id]['amount']
                user_data['games_lost'] += 1
    
    def place_bet(self, user_id, amount, auto_cashout=None):
        """–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"""
        if self.is_running:
            return False, "–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç"
        
        user_data = get_user_data(user_id)
        if user_data['balance'] < amount:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
        
        user_data['balance'] -= amount
        user_data['total_bet'] += amount
        user_data['games_played'] += 1
        
        self.bets[user_id] = {
            'amount': amount,
            'auto_cashout': auto_cashout
        }
        return True, "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"
    
    def cashout(self, user_id):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É"""
        if not self.is_running or self.is_crashed:
            return False, "–ò–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç"
        
        if user_id not in self.bets:
            return False, "–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞–≤–∫–∏"
        
        if user_id in self.cashed_out:
            return False, "–í—ã —É–∂–µ –≤—ã–≤–µ–ª–∏"
        
        # –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥
        bet_amount = self.bets[user_id]['amount']
        win_amount = int(bet_amount * self.multiplier)
        
        user_data = get_user_data(user_id)
        user_data['balance'] += win_amount
        user_data['total_won'] += win_amount
        user_data['games_won'] += 1
        
        self.cashed_out[user_id] = self.multiplier
        return True, f"–í—ã–≤–µ–¥–µ–Ω–æ {win_amount} –º–æ–Ω–µ—Ç –ø—Ä–∏ x{self.multiplier:.2f}"

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(user_id)
    if user_id not in users:
        users[user_id] = {
            "balance": 1000,  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ –≤ GiftUp
            "gifts_sent": 0,
            "gifts_received": 0,
            "total_spent": 0,
            "games_played": 0,
            "games_won": 0,
            "games_lost": 0,
            "total_bet": 0,
            "total_won": 0,
            "total_lost": 0,
            "last_bonus": None,
            "level": 1,
            "experience": 0,
            "achievements": [],
            "inventory": {}
        }
    return users[user_id]

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        url = f"{API_URL}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Failed to send message: {e}")
        return None

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        url = f"{API_URL}/editMessageText"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"Failed to edit message: {e}")
        return None

def answer_callback(callback_query_id, text=""):
    """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        url = f"{API_URL}/answerCallbackQuery"
        data = {
            "callback_query_id": callback_query_id,
            "text": text
        }
        requests.post(url, data=data, timeout=5)
    except Exception as e:
        logger.error(f"Failed to answer callback: {e}")

def main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å—Ç–∏–ª–µ GiftUp"""
    return {
        "inline_keyboard": [
            [{"text": "üöÄ –ò–≥—Ä–∞—Ç—å –≤ Crash", "callback_data": "play_crash"}],
            [{"text": "üéÅ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤", "callback_data": "gift_shop"}],
            [{"text": "üí∞ –ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}, {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}],
            [{"text": "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "callback_data": "achievements"}, {"text": "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "callback_data": "referrals"}],
            [{"text": "üéÆ WebApp", "web_app": {"url": f"{WEBHOOK_URL}/webapp"}}]
        ]
    }

def handle_start(chat_id, user_name, referrer_id=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    user_data = get_user_data(chat_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if referrer_id and str(referrer_id) != str(chat_id):
        referrer_data = get_user_data(referrer_id)
        if 'referrals' not in referrer_data:
            referrer_data['referrals'] = []
        if str(chat_id) not in referrer_data['referrals']:
            # –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            referrer_data['balance'] += 500
            referrer_data['referrals'].append(str(chat_id))
            user_data['balance'] += 200  # –ë–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
            send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +500 –º–æ–Ω–µ—Ç\n–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(referrer_data['referrals'])}")
    
    text = f"""üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftBot, {user_name}!</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user_data['level']} ({user_data['experience']} XP)

üöÄ <b>Crash Game</b> - –≥–ª–∞–≤–Ω–∞—è –∏–≥—Ä–∞!
üéÅ <b>–ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤</b> - –∫—É–ø–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–∑—å—è–º
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

üí° <i>–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö —Å—Ç–∞–≤–æ–∫!</i>"""

    send_message(chat_id, text, main_menu_keyboard())

def handle_crash_game(chat_id, message_id):
    """–ú–µ–Ω—é –∏–≥—Ä—ã Crash"""
    global current_crash_game
    
    user_data = get_user_data(chat_id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
    if current_crash_game and current_crash_game.is_running:
        game_status = f"üöÄ –ò–≥—Ä–∞ –∏–¥–µ—Ç! x{current_crash_game.multiplier:.2f}"
        if str(chat_id) in current_crash_game.bets:
            bet_info = current_crash_game.bets[str(chat_id)]
            game_status += f"\nüí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_info['amount']} –º–æ–Ω–µ—Ç"
            if str(chat_id) in current_crash_game.cashed_out:
                game_status += f"\n‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∏ x{current_crash_game.cashed_out[str(chat_id)]:.2f}"
    elif current_crash_game and current_crash_game.is_crashed:
        game_status = f"üí• –ö—Ä–∞—à –ø—Ä–∏ x{current_crash_game.multiplier:.2f}!\n–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥..."
    else:
        game_status = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã..."
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üéØ –°—Ç–∞–≤–∫–∞ 10", "callback_data": "bet_10"}, {"text": "üéØ –°—Ç–∞–≤–∫–∞ 50", "callback_data": "bet_50"}],
            [{"text": "üéØ –°—Ç–∞–≤–∫–∞ 100", "callback_data": "bet_100"}, {"text": "üéØ –°—Ç–∞–≤–∫–∞ 500", "callback_data": "bet_500"}],
            [{"text": "üí∏ –í—ã–≤–µ—Å—Ç–∏", "callback_data": "cashout"}],
            [{"text": "üìà –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", "callback_data": "game_history"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}]
        ]
    }
    
    text = f"""üöÄ <b>Crash Game</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

üéÆ <b>–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:</b>
{game_status}

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data['games_played']}
‚Ä¢ –ü–æ–±–µ–¥: {user_data['games_won']}
‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user_data['games_lost']}
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {user_data['total_won']} –º–æ–Ω–µ—Ç

‚ùì <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
2. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞—Å—Ç—É—â–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
3. –í—ã–≤–µ–¥–∏—Ç–µ –¥–æ –∫—Ä–∞—Ö–∞!"""

    edit_message(chat_id, message_id, text, keyboard)

def handle_bet(chat_id, message_id, amount):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏"""
    global current_crash_game
    
    if not current_crash_game or current_crash_game.is_running:
        answer_callback(message_id, "–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å–µ–π—á–∞—Å")
        return
    
    success, message = current_crash_game.place_bet(chat_id, amount)
    answer_callback(message_id, message)
    
    if success:
        handle_crash_game(chat_id, message_id)

def handle_cashout(chat_id, callback_query_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞"""
    global current_crash_game
    
    if not current_crash_game:
        answer_callback(callback_query_id, "–ò–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç")
        return
    
    success, message = current_crash_game.cashout(chat_id)
    answer_callback(callback_query_id, message)

def handle_gift_shop(chat_id, message_id):
    """–ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤"""
    keyboard = {"inline_keyboard": []}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarities = {
        "common": [],
        "uncommon": [],
        "rare": [],
        "epic": [],
        "legendary": [],
        "mythic": []
    }
    
    for gift_id, gift_info in GIFTS.items():
        rarities[gift_info['rarity']].append((gift_id, gift_info))
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    for rarity, gifts in rarities.items():
        if gifts:
            rarity_names = {
                "common": "‚ö™ –û–±—ã—á–Ω—ã–µ",
                "uncommon": "üü¢ –ù–µ–æ–±—ã—á–Ω—ã–µ", 
                "rare": "üîµ –†–µ–¥–∫–∏–µ",
                "epic": "üü£ –≠–ø–∏—á–µ—Å–∫–∏–µ",
                "legendary": "üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ",
                "mythic": "üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ"
            }
            keyboard["inline_keyboard"].append([{
                "text": rarity_names[rarity],
                "callback_data": f"rarity_{rarity}"
            }])
    
    keyboard["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}])
    
    text = """üéÅ <b>–ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∞—Ä–∫–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤:

‚ö™ <b>–û–±—ã—á–Ω—ã–µ</b> - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
üü¢ <b>–ù–µ–æ–±—ã—á–Ω—ã–µ</b> - –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ
üîµ <b>–†–µ–¥–∫–∏–µ</b> - —Ü–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
üü£ <b>–≠–ø–∏—á–µ—Å–∫–∏–µ</b> - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ
üü° <b>–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ</b> - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ
üî¥ <b>–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ</b> - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ

üí° <i>–ü–æ–¥–∞—Ä–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–∑—å—è–º!</i>"""

    edit_message(chat_id, message_id, text, keyboard)

def handle_rarity_gifts(chat_id, message_id, rarity):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    gifts_of_rarity = [(gid, ginfo) for gid, ginfo in GIFTS.items() if ginfo['rarity'] == rarity]
    
    keyboard = {"inline_keyboard": []}
    
    for gift_id, gift_info in gifts_of_rarity:
        keyboard["inline_keyboard"].append([{
            "text": f"{gift_info['emoji']} {gift_info['name']} - {gift_info['price']}üí∞",
            "callback_data": f"buy_{gift_id}"
        }])
    
    keyboard["inline_keyboard"].append([
        {"text": "üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "callback_data": "gift_shop"},
        {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}
    ])
    
    rarity_names = {
        "common": "‚ö™ –û–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
        "uncommon": "üü¢ –ù–µ–æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
        "rare": "üîµ –†–µ–¥–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏", 
        "epic": "üü£ –≠–ø–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏",
        "legendary": "üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏",
        "mythic": "üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏"
    }
    
    text = f"üéÅ <b>{rarity_names[rarity]}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    edit_message(chat_id, message_id, text, keyboard)

def handle_buy_gift(chat_id, message_id, gift_id):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    user_data = get_user_data(chat_id)
    gift = GIFTS.get(gift_id)
    
    if not gift:
        answer_callback(message_id, "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user_data['balance'] < gift['price']:
        keyboard = {
            "inline_keyboard": [
                [{"text": "üí∞ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "callback_data": "daily_bonus"}],
                [{"text": "üîô –ö –ø–æ–¥–∞—Ä–∫–∞–º", "callback_data": "gift_shop"}]
            ]
        }
        text = f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üí∏ <b>–ù—É–∂–Ω–æ:</b> {gift['price']} –º–æ–Ω–µ—Ç

{gift['emoji']} <b>{gift['name']}</b>"""
        edit_message(chat_id, message_id, text, keyboard)
        return
    
    # –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
    user_data['balance'] -= gift['price']
    user_data['gifts_sent'] += 1
    user_data['total_spent'] += gift['price']
    user_data['experience'] += gift['price'] // 10  # XP –∑–∞ –ø–æ–∫—É–ø–∫—É
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    if gift_id not in user_data['inventory']:
        user_data['inventory'][gift_id] = 0
    user_data['inventory'][gift_id] += 1
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üéÅ –ö—É–ø–∏—Ç—å –µ—â–µ", "callback_data": "gift_shop"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}]
        ]
    }
    
    text = f"""‚úÖ <b>–ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω!</b>

üéÅ <b>{gift['name']}</b>
üí∞ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {gift['price']} –º–æ–Ω–µ—Ç  
üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
‚≠ê <b>–ü–æ–ª—É—á–µ–Ω–æ XP:</b> {gift['price'] // 10}

üéâ <b>–ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!</b>"""

    edit_message(chat_id, message_id, text, keyboard)

# –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –¥–ª—è Crash
def game_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã"""
    global current_crash_game
    
    while True:
        try:
            with game_lock:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                current_crash_game = CrashGame()
                
                # –ñ–¥–µ–º —Å—Ç–∞–≤–∫–∏ (10 —Å–µ–∫—É–Ω–¥)
                time.sleep(10)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
                current_crash_game.start_round()
                
                # –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
                while current_crash_game.is_running and not current_crash_game.is_crashed:
                    current_crash_game.update_multiplier()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ-–≤—ã–≤–æ–¥—ã
                    for user_id in list(current_crash_game.bets.keys()):
                        bet_info = current_crash_game.bets[user_id]
                        if (bet_info.get('auto_cashout') and 
                            current_crash_game.multiplier >= bet_info['auto_cashout'] and
                            user_id not in current_crash_game.cashed_out):
                            current_crash_game.cashout(user_id)
                    
                    time.sleep(0.1)  # 100ms –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                
                # –ö—Ä–∞—à –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü
                if not current_crash_game.is_crashed:
                    current_crash_game.crash()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
                time.sleep(10)
                
        except Exception as e:
            logger.error(f"Game loop error: {e}")
            time.sleep(5)

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
game_thread = threading.Thread(target=game_loop)
game_thread.daemon = True
game_thread.start()

@app.route("/")
def home():
    return """
    <h1>üéÅ GiftBot Crash Game üöÄ</h1>
    <p>Telegram bot –≤ —Å—Ç–∏–ª–µ GiftUp</p>
    """

@app.route("/webapp")  
def webapp():
    """WebApp –≤ —Å—Ç–∏–ª–µ GiftUp"""
    return """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GiftBot Crash Game</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
            color: #fff;
            min-height: 100vh;
            overflow: hidden;
        }
        
        .history-item.low { background: #ff4757; }
        .history-item.medium { background: #ffa502; }
        .history-item.high { background: #2ed573; }
        .history-item.mega { background: #5352ed; }
        
        .stars {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .star {
            position: absolute;
            width: 2px;
            height: 2px;
            background: #fff;
            border-radius: 50%;
            animation: twinkle 2s infinite;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="stars" id="stars"></div>
    
    <div class="container">
        <div class="game-header">
            <div class="balance">üí∞ <span id="balance">1000</span> –º–æ–Ω–µ—Ç</div>
            <div>üöÄ Crash Game</div>
        </div>
        
        <div class="crash-display" id="crashDisplay">
            <div class="multiplier" id="multiplier">1.00x</div>
            <div class="rocket" id="rocket">üöÄ</div>
        </div>
        
        <div class="controls">
            <input type="number" class="bet-input" id="betAmount" placeholder="–°—Ç–∞–≤–∫–∞" min="1" value="10">
            <button class="btn btn-bet" id="betButton" onclick="placeBet()">–°—Ç–∞–≤–∫–∞</button>
            <input type="number" class="bet-input" id="autoCashout" placeholder="–ê–≤—Ç–æ-–≤—ã–≤–æ–¥" min="1.01" step="0.01">
            <button class="btn btn-cashout" id="cashoutButton" onclick="cashOut()" disabled>–í—ã–≤–µ—Å—Ç–∏</button>
        </div>
        
        <div class="game-info">
            <div>–°—Ç–∞—Ç—É—Å: <span id="gameStatus">–û–∂–∏–¥–∞–Ω–∏–µ...</span></div>
            <div>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <span id="currentBet">-</span></div>
            <div>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: <span id="potentialWin">-</span></div>
        </div>
        
        <div class="history" id="history">
            <!-- –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
    </div>
    
    <script>
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        
        let gameData = {
            balance: 1000,
            currentBet: 0,
            multiplier: 1.0,
            isPlaying: false,
            gameRunning: false,
            history: []
        };
        
        // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã
        function createStars() {
            const starsContainer = document.getElementById('stars');
            for (let i = 0; i < 50; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                star.style.left = Math.random() * 100 + '%';
                star.style.top = Math.random() * 100 + '%';
                star.style.animationDelay = Math.random() * 2 + 's';
                starsContainer.appendChild(star);
            }
        }
        
        function updateDisplay() {
            document.getElementById('balance').textContent = gameData.balance;
            document.getElementById('multiplier').textContent = gameData.multiplier.toFixed(2) + 'x';
            document.getElementById('currentBet').textContent = gameData.currentBet || '-';
            
            if (gameData.currentBet) {
                const potential = Math.floor(gameData.currentBet * gameData.multiplier);
                document.getElementById('potentialWin').textContent = potential + ' –º–æ–Ω–µ—Ç';
            } else {
                document.getElementById('potentialWin').textContent = '-';
            }
        }
        
        function placeBet() {
            const betAmount = parseInt(document.getElementById('betAmount').value);
            const autoCashout = parseFloat(document.getElementById('autoCashout').value);
            
            if (!betAmount || betAmount < 1) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É');
                return;
            }
            
            if (gameData.balance < betAmount) {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
                return;
            }
            
            if (gameData.gameRunning) {
                alert('–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç');
                return;
            }
            
            gameData.balance -= betAmount;
            gameData.currentBet = betAmount;
            gameData.isPlaying = true;
            gameData.autoCashout = autoCashout || null;
            
            document.getElementById('betButton').disabled = true;
            document.getElementById('cashoutButton').disabled = false;
            document.getElementById('gameStatus').textContent = '–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞';
            
            updateDisplay();
        }
        
        function cashOut() {
            if (!gameData.isPlaying || !gameData.gameRunning) return;
            
            const winAmount = Math.floor(gameData.currentBet * gameData.multiplier);
            gameData.balance += winAmount;
            
            gameData.isPlaying = false;
            document.getElementById('cashoutButton').disabled = true;
            document.getElementById('gameStatus').textContent = `–í—ã–≤–µ–¥–µ–Ω–æ: ${winAmount} –º–æ–Ω–µ—Ç`;
            
            updateDisplay();
        }
        
        function simulateGame() {
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            gameData.multiplier = 1.0;
            gameData.gameRunning = false;
            
            document.getElementById('betButton').disabled = false;
            document.getElementById('cashoutButton').disabled = true;
            document.getElementById('gameStatus').textContent = '–ü—Ä–∏–µ–º —Å—Ç–∞–≤–æ–∫...';
            
            // –§–∞–∑–∞ –ø—Ä–∏–µ–º–∞ —Å—Ç–∞–≤–æ–∫ (5 —Å–µ–∫—É–Ω–¥)
            setTimeout(() => {
                gameData.gameRunning = true;
                document.getElementById('betButton').disabled = true;
                document.getElementById('gameStatus').textContent = '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!';
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –∫—Ä–∞—à–∞
                const crashPoint = generateCrashPoint();
                
                // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
                const gameInterval = setInterval(() => {
                    gameData.multiplier += 0.01 + (gameData.multiplier * 0.001);
                    
                    // –î–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∫–µ—Ç—ã
                    const rocket = document.getElementById('rocket');
                    const progress = Math.min(gameData.multiplier / 10, 1);
                    rocket.style.left = (progress * 80) + '%';
                    rocket.style.bottom = (progress * 80) + '%';
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞
                    if (gameData.isPlaying && gameData.autoCashout && 
                        gameData.multiplier >= gameData.autoCashout) {
                        cashOut();
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—à–∞
                    if (gameData.multiplier >= crashPoint) {
                        crash(crashPoint);
                        clearInterval(gameInterval);
                    }
                    
                    updateDisplay();
                }, 100);
                
            }, 5000);
        }
        
        function generateCrashPoint() {
            const rand = Math.random();
            if (rand < 0.1) return Math.random() * 8 + 10; // 10% - –≤—ã—Å–æ–∫–∏–π
            if (rand < 0.3) return Math.random() * 3 + 3;  // 20% - —Å—Ä–µ–¥–Ω–∏–π
            return Math.random() * 1.5 + 1.01;            // 70% - –Ω–∏–∑–∫–∏–π
        }
        
        function crash(crashPoint) {
            gameData.gameRunning = false;
            
            // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∫—Ä–∞—à–∞
            const multiplierElement = document.getElementById('multiplier');
            multiplierElement.classList.add('crashed');
            multiplierElement.textContent = '–ö–†–ê–®!';
            
            const rocket = document.getElementById('rocket');
            rocket.textContent = 'üí•';
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã–≤–µ–ª - –ø—Ä–æ–∏–≥—Ä—ã—à
            if (gameData.isPlaying) {
                gameData.isPlaying = false;
                document.getElementById('gameStatus').textContent = `–ö—Ä–∞—à –ø—Ä–∏ ${crashPoint.toFixed(2)}x - –ø—Ä–æ–∏–≥—Ä—ã—à!`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            gameData.history.unshift(crashPoint);
            if (gameData.history.length > 10) gameData.history.pop();
            updateHistory();
            
            // –°–±—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            setTimeout(() => {
                multiplierElement.classList.remove('crashed');
                rocket.textContent = 'üöÄ';
                rocket.style.left = '10%';
                rocket.style.bottom = '10%';
                gameData.currentBet = 0;
                gameData.isPlaying = false;
                updateDisplay();
                simulateGame();
            }, 3000);
        }
        
        function updateHistory() {
            const historyContainer = document.getElementById('history');
            historyContainer.innerHTML = '';
            
            gameData.history.forEach(crash => {
                const item = document.createElement('div');
                item.className = 'history-item';
                
                if (crash < 1.5) item.classList.add('low');
                else if (crash < 3) item.classList.add('medium');
                else if (crash < 10) item.classList.add('high');
                else item.classList.add('mega');
                
                item.textContent = crash.toFixed(2) + 'x';
                historyContainer.appendChild(item);
            });
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        createStars();
        updateDisplay();
        simulateGame();
    </script>
</body>
</html>"""

@app.route("/webhook", methods=["POST"])
def webhook():
    """Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    try:
        data = request.get_json()
        
        if "message" in data:
            message = data["message"]
            chat_id = message["chat"]["id"]
            user_name = message["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            text = message.get("text", "")
            
            if text.startswith("/start"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
                referrer_id = None
                if " " in text:
                    try:
                        referrer_id = int(text.split()[1])
                    except:
                        pass
                handle_start(chat_id, user_name, referrer_id)
        
        elif "callback_query" in data:
            callback = data["callback_query"]
            chat_id = callback["message"]["chat"]["id"]
            message_id = callback["message"]["message_id"]
            callback_data = callback["data"]
            user_name = callback["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            answer_callback(callback["id"])
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            if callback_data == "main":
                user_data = get_user_data(chat_id)
                text = f"""üéÅ <b>GiftBot - {user_name}</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user_data['level']} ({user_data['experience']} XP)

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
                edit_message(chat_id, message_id, text, main_menu_keyboard())
                
            elif callback_data == "play_crash":
                handle_crash_game(chat_id, message_id)
                
            elif callback_data.startswith("bet_"):
                amount = int(callback_data.split("_")[1])
                handle_bet(chat_id, message_id, amount)
                
            elif callback_data == "cashout":
                handle_cashout(chat_id, callback["id"])
                
            elif callback_data == "gift_shop":
                handle_gift_shop(chat_id, message_id)
                
            elif callback_data.startswith("rarity_"):
                rarity = callback_data.split("_")[1]
                handle_rarity_gifts(chat_id, message_id, rarity)
                
            elif callback_data.startswith("buy_"):
                gift_id = callback_data.replace("buy_", "")
                handle_buy_gift(chat_id, message_id, gift_id)
                
            elif callback_data in ["balance", "stats"]:
                user_data = get_user_data(chat_id)
                win_rate = (user_data['games_won'] / max(user_data['games_played'], 1)) * 100
                
                text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - {user_name}</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user_data['level']} (XP: {user_data['experience']})

üéÆ <b>–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data['games_played']}
‚Ä¢ –ü–æ–±–µ–¥: {user_data['games_won']}
‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user_data['games_lost']}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%

üí∏ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {user_data['total_bet']} –º–æ–Ω–µ—Ç
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {user_data['total_won']} –º–æ–Ω–µ—Ç
‚Ä¢ –ü–æ—Ç–µ—Ä—è–Ω–æ: {user_data['total_lost']} –º–æ–Ω–µ—Ç

üéÅ <b>–ü–æ–¥–∞—Ä–∫–∏:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data['gifts_sent']}
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user_data['total_spent']} –º–æ–Ω–µ—Ç"""

                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üöÄ –ò–≥—Ä–∞—Ç—å", "callback_data": "play_crash"}],
                        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}]
                    ]
                }
                edit_message(chat_id, message_id, text, keyboard)
        
        return "OK"
    
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "ERROR", 500

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        response = requests.post(f"{API_URL}/setWebhook", data={"url": webhook_url})
        result = response.json()
        
        if result.get("ok"):
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: {webhook_url}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
            return False
    except Exception as e:
        logger.error(f"Failed to setup webhook: {e}")
        return False

if __name__ == "__main__":
    setup_webhook()
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port, debug=False)container {
            max-width: 400px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
        }
        
        .game-header {
            text-align: center;
            margin-bottom: 20px;
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .balance {
            font-size: 20px;
            font-weight: bold;
            color: #ffd700;
        }
        
        .crash-display {
            position: relative;
            height: 300px;
            background: linear-gradient(45deg, #1e3c72, #2a5298);
            border-radius: 20px;
            margin-bottom: 20px;
            overflow: hidden;
            border: 2px solid #ffd700;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .multiplier {
            font-size: 48px;
            font-weight: bold;
            color: #00ff00;
            text-shadow: 0 0 20px #00ff00;
            transition: all 0.1s ease;
        }
        
        .multiplier.crashed {
            color: #ff0000;
            text-shadow: 0 0 20px #ff0000;
        }
        
        .rocket {
            position: absolute;
            font-size: 40px;
            transition: all 0.5s ease;
        }
        
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .bet-input {
            padding: 15px;
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 15px;
            color: #fff;
            font-size: 16px;
            text-align: center;
        }
        
        .btn {
            padding: 15px;
            border: none;
            border-radius: 15px;
            font-weight: bold;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
        }
        
        .btn-bet {
            background: linear-gradient(45deg, #00ff00, #32cd32);
            color: #000;
        }
        
        .btn-cashout {
            background: linear-gradient(45deg, #ff6b6b, #ff4757);
            color: #fff;
        }
        
        .btn:disabled {
            background: rgba(255,255,255,0.3);
            cursor: not-allowed;
        }
        
        .game-info {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 15px;
            margin-bottom: 20px;
        }
        
        .history {
            display: flex;
            gap: 5px;
            justify-content: center;
            margin-top: 10px;
        }
        
        .history-item {
            padding: 5px 10px;
            border-radius: 8px;
            font-size: 12px;
            font-weight: bold;
        }
        
        .
