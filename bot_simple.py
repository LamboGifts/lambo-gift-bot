import os
import json
import logging
from flask import Flask, request, jsonify
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7678954168:AAG6755ngOoYcQfIt6viZKMRXRcv6dOd0vY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://lambo-gift.onrender.com")
TELEGRAM_API = f"https://api.telegram.org/bot{TOKEN}"

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
users = {}

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{TELEGRAM_API}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    
    response = requests.post(url, data=data)
    return response.json()

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"{TELEGRAM_API}/editMessageText"
    data = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    
    response = requests.post(url, data=data)
    return response.json()

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users:
        users[user_id] = {
            "balance": 100,
            "gifts_sent": 0,
            "gifts_received": 0
        }
    return users[user_id]

def update_user_balance(user_id, amount):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users:
        get_user_data(user_id)
    users[user_id]["balance"] += amount

# –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤
GIFTS = {
    "rose": {"name": "üåπ –†–æ–∑–∞", "price": 10},
    "cake": {"name": "üéÇ –¢–æ—Ä—Ç", "price": 25},
    "diamond": {"name": "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç", "price": 50},
    "crown": {"name": "üëë –ö–æ—Ä–æ–Ω–∞", "price": 100}
}

def handle_start(chat_id, user_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_data = get_user_data(chat_id)
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤", "callback_data": "catalog"}],
            [{"text": "üí≥ –ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}],
            [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}]
        ]
    }
    
    text = f"""üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftBot, {user_name}!</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéâ <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–∑—å—è–º!</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    send_message(chat_id, text, keyboard)

def handle_catalog(chat_id, message_id):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    keyboard = {"inline_keyboard": []}
    
    for gift_id, gift_info in GIFTS.items():
        keyboard["inline_keyboard"].append([{
            "text": f"{gift_info['name']} - {gift_info['price']} –º–æ–Ω–µ—Ç",
            "callback_data": f"buy_{gift_id}"
        }])
    
    keyboard["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}])
    
    text = "üéÅ <b>–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    edit_message(chat_id, message_id, text, keyboard)

def handle_balance(chat_id, message_id):
    """–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞"""
    user_data = get_user_data(chat_id)
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "callback_data": "add_balance"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}]
        ]
    }
    
    text = f"""üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéÅ <b>–ü–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {user_data['gifts_sent']}
üéâ <b>–ü–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:</b> {user_data['gifts_received']}"""

    edit_message(chat_id, message_id, text, keyboard)

def handle_buy_gift(chat_id, message_id, gift_id):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    user_data = get_user_data(chat_id)
    gift = GIFTS.get(gift_id)
    
    if not gift:
        edit_message(chat_id, message_id, "‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if user_data['balance'] < gift['price']:
        keyboard = {
            "inline_keyboard": [
                [{"text": "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "callback_data": "add_balance"}],
                [{"text": "üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", "callback_data": "catalog"}]
            ]
        }
        text = f"""‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üí∏ <b>–ù—É–∂–Ω–æ:</b> {gift['price']} –º–æ–Ω–µ—Ç"""
        edit_message(chat_id, message_id, text, keyboard)
        return
    
    # –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
    user_data['balance'] -= gift['price']
    user_data['gifts_sent'] += 1
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}]
        ]
    }
    
    text = f"""‚úÖ <b>–ü–æ–¥–∞—Ä–æ–∫ –∫—É–ø–ª–µ–Ω!</b>

üéÅ <b>{gift['name']}</b>
üí∞ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {gift['price']} –º–æ–Ω–µ—Ç
üí≥ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

üéâ <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>"""

    edit_message(chat_id, message_id, text, keyboard)

def handle_add_balance(chat_id, message_id):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    update_user_balance(chat_id, 50)
    user_data = get_user_data(chat_id)
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main"}]
        ]
    }
    
    text = f"""üéâ <b>–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!</b>

üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ:</b> 50 –º–æ–Ω–µ—Ç
üí≥ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç

<i>–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–ø–ª–∞—Ç–∞</i>"""

    edit_message(chat_id, message_id, text, keyboard)

def handle_main_menu(chat_id, message_id, user_name):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_data = get_user_data(chat_id)
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤", "callback_data": "catalog"}],
            [{"text": "üí≥ –ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}],
            [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}]
        ]
    }
    
    text = f"""üéÅ <b>GiftBot - {user_name}!</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_data['balance']} –º–æ–Ω–µ—Ç
üéâ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"""

    edit_message(chat_id, message_id, text, keyboard)

@app.route("/")
def index():
    return "üéÅ GiftBot is running! ‚úÖ"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        data = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
        
        if "message" in data:
            # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = data["message"]
            chat_id = message["chat"]["id"]
            user_name = message["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            text = message.get("text", "")
            
            if text == "/start":
                handle_start(chat_id, user_name)
        
        elif "callback_query" in data:
            # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            callback = data["callback_query"]
            chat_id = callback["message"]["chat"]["id"]
            message_id = callback["message"]["message_id"]
            callback_data = callback["data"]
            user_name = callback["from"].get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            answer_url = f"{TELEGRAM_API}/answerCallbackQuery"
            requests.post(answer_url, data={"callback_query_id": callback["id"]})
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if callback_data == "catalog":
                handle_catalog(chat_id, message_id)
            elif callback_data == "balance" or callback_data == "stats":
                handle_balance(chat_id, message_id)
            elif callback_data == "add_balance":
                handle_add_balance(chat_id, message_id)
            elif callback_data == "main":
                handle_main_menu(chat_id, message_id, user_name)
            elif callback_data.startswith("buy_"):
                gift_id = callback_data.replace("buy_", "")
                handle_buy_gift(chat_id, message_id, gift_id)
        
        return "OK"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "ERROR", 500

def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    url = f"{TELEGRAM_API}/setWebhook"
    data = {"url": webhook_url}
    
    response = requests.post(url, data=data)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {response.json()}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    set_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
